---
alwaysApply: true
description: AI 변경사항 자동 커밋 시스템 규칙
---

# 🤖 AI 자동 커밋 시스템

## 📝 커밋 메시지 규칙

### 한글 커밋 메시지 형식
```
타입: 간단한 설명

상세 설명 (선택사항)

- 변경된 파일: 파일명
- 주요 변경사항: 구체적인 내용
- 영향 범위: 프론트엔드/백엔드/데이터베이스
```

### 커밋 타입
- **feat**: 새로운 기능 추가
- **fix**: 버그 수정
- **style**: 코드 스타일 변경 (포맷팅, 세미콜론 등)
- **refactor**: 코드 리팩토링
- **docs**: 문서 수정
- **test**: 테스트 코드 추가/수정
- **chore**: 빌드 프로세스, 설정 파일 수정
- **perf**: 성능 개선
- **ci**: CI/CD 설정 변경

### 예시 커밋 메시지
```
feat: 관리자 대시보드에 통계 카드 추가

- 새로운 기능: 사용자 수, 세션 수, 초대 코드 수 표시
- UI 개선: 그라데이션 배경과 호버 효과 적용
- 반응형 디자인: 모바일/데스크톱 대응

- 변경된 파일: AdminDashboard.tsx
- 주요 변경사항: 통계 데이터 시각화 컴포넌트 구현
- 영향 범위: 프론트엔드
```

## 🔄 자동 커밋 워크플로우

### 1. 변경사항 감지
- 파일 수정 감지
- 변경된 파일 목록 확인
- 변경 유형 분석

### 2. 커밋 메시지 생성
- 변경 유형에 따른 타입 결정
- 한글 설명 자동 생성
- 상세 정보 포함

### 3. 자동 커밋 실행
- `git add .` 실행
- 생성된 메시지로 커밋
- 결과 확인 및 로그 출력

## 📋 커밋 규칙

### 필수 사항
- 모든 커밋 메시지는 한글로 작성
- 타입과 설명은 필수
- 변경된 파일명 명시
- 주요 변경사항 요약

### 권장 사항
- 커밋 전 코드 검토
- 의미 있는 단위로 커밋
- 관련 없는 변경사항은 분리
- 테스트 통과 확인

## 🚀 자동화 스크립트

### PowerShell 스크립트 (Windows)
```powershell
# auto-commit.ps1
param(
    [string]$Type = "feat",
    [string]$Message = "",
    [string]$Files = ""
)

# 변경사항 확인
$changes = git status --porcelain
if ($changes.Count -eq 0) {
    Write-Host "변경사항이 없습니다." -ForegroundColor Yellow
    exit 0
}

# 커밋 메시지 생성
$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
$commitMessage = "$Type`: $Message

- 변경 시간: $timestamp
- 변경된 파일: $Files
- AI 자동 커밋"

# 커밋 실행
git add .
git commit -m $commitMessage

Write-Host "커밋 완료: $commitMessage" -ForegroundColor Green
```

### Bash 스크립트 (Linux/Mac)
```bash
#!/bin/bash
# auto-commit.sh

TYPE=${1:-"feat"}
MESSAGE=${2:-"AI 자동 변경사항"}
FILES=${3:-""}

# 변경사항 확인
if [ -z "$(git status --porcelain)" ]; then
    echo "변경사항이 없습니다."
    exit 0
fi

# 커밋 메시지 생성
TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
COMMIT_MSG="$TYPE: $MESSAGE

- 변경 시간: $TIMESTAMP
- 변경된 파일: $FILES
- AI 자동 커밋"

# 커밋 실행
git add .
git commit -m "$COMMIT_MSG"

echo "커밋 완료: $COMMIT_MSG"
```

## 🔧 설정 방법

### 1. 스크립트 파일 생성
```bash
# Windows
New-Item -Path ".cursor/scripts/auto-commit.ps1" -ItemType File

# Linux/Mac
mkdir -p .cursor/scripts
touch .cursor/scripts/auto-commit.sh
chmod +x .cursor/scripts/auto-commit.sh
```

### 2. Git Hook 설정
```bash
# pre-commit hook
echo "#!/bin/bash
.cursor/scripts/auto-commit.sh" > .git/hooks/pre-commit
chmod +x .git/hooks/pre-commit
```

### 3. IDE 통합
- VSCode/Cursor에서 파일 저장 시 자동 실행
- 변경사항 감지 시 자동 커밋
- 커밋 메시지 템플릿 사용

## 📊 커밋 히스토리 관리

### 브랜치 전략
- `main`: 안정적인 프로덕션 코드
- `develop`: 개발 중인 기능들
- `feature/*`: 새로운 기능 개발
- `fix/*`: 버그 수정

### 커밋 정리
```bash
# 최근 커밋들 확인
git log --oneline -10

# 커밋 메시지 수정
git commit --amend -m "새로운 메시지"

# 커밋 합치기
git rebase -i HEAD~3
```

## 🎯 AI 커밋 메시지 생성 규칙

### 파일 변경 유형별 메시지
- **React 컴포넌트**: "컴포넌트명 기능 개선"
- **API 엔드포인트**: "API명 엔드포인트 수정"
- **데이터베이스**: "데이터베이스 스키마 변경"
- **스타일링**: "UI/UX 디자인 개선"
- **설정 파일**: "프로젝트 설정 업데이트"

### 자동 생성 예시
```
feat: 달력 컴포넌트 세션 표시 기능 추가

- 새로운 기능: PT 세션을 달력에 시각적으로 표시
- UI 개선: 세션 상태별 색상 구분
- 사용자 경험: 직관적인 일정 확인 가능

- 변경된 파일: Calendar.tsx
- 주요 변경사항: 세션 데이터 바인딩 및 스타일링
- 영향 범위: 프론트엔드
```

## ⚠️ 주의사항

### 커밋 전 확인사항
- [ ] 코드가 정상적으로 컴파일되는가?
- [ ] 테스트가 통과하는가?
- [ ] 불필요한 파일이 포함되지 않았는가?
- [ ] 커밋 메시지가 명확한가?

### 자동 커밋 제외 파일
- `.env*` 파일
- `node_modules/` 디렉토리
- 빌드 결과물 (`dist/`, `build/`)
- 로그 파일 (`*.log`)
- 임시 파일 (`*.tmp`)

이 시스템을 통해 AI가 만드는 모든 변경사항이 자동으로 한글 커밋 메시지와 함께 기록됩니다! 🚀